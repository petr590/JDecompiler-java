package x590.jdecompiler.main;

import java.util.Collections;
import java.util.List;

import x590.argparser.ArgsNamespace;
import x590.argparser.Flag;
import x590.argparser.StandartArgParser;
import x590.argparser.option.EnumOption;
import x590.argparser.option.StringOption;

public class JDecompiler {
	
	private static JDecompiler INSTANCE;
	
	public static JDecompiler getInstance() {
		if(INSTANCE != null)
			return INSTANCE;
		
		throw new IllegalStateException("JDecompiler yet not initialized");
	}
	
	
	public final List<String> files;
	
	
	public enum ConstantsUsage {
		ALWAYS, MIN, NEVER
	}
	
	public final ConstantsUsage constantsUsage;
	public final boolean showAutogenerated, showSynthetic, showBridge;
	
	public final String indent;
	
	public final char longSuffix, floatSuffix, doubleSuffix;
	public final boolean printDoubleSuffix, printTrailingZero;
	
	public final boolean escapeUnicodeChars;
	public final boolean printClassVersion;
	
	public final boolean multilineStringAllowed;
	public final boolean shortArrayInitAllowed;
	
	public final boolean printBracketsAroundBitwiseOperands;
	public final boolean canOmitCurlyBrackets, canOmitThisClass;
	
	public static void init(String[] args) {
		
		if(INSTANCE != null)
			throw new IllegalStateException("JDecompiler already initialized");
		
		INSTANCE = new JDecompiler(args);
	}
	
	
	public JDecompiler(String[] args) {
		
		ArgsNamespace arguments = new StandartArgParser("JDecompiler", "0.7.5").localize()
				
				.add(new StringOption("files").help("Files to be processed").oneOrMoreTimes())
				
				.add(new EnumOption<>(ConstantsUsage.class, "-c", "--use-constants")
						.implicitValue(ConstantsUsage.ALWAYS).defaultValue(ConstantsUsage.ALWAYS)
						.help("Use constants: always - always use, min - use only general constants (Double.MAX_VALUE, Math.PI, etc.), never - never use"))
				
				.add(new Flag("-auto", "--autogenerated").help("Show synthetic fields, methods and classes generated by compiler"))
				.add(new Flag("-s", "--synthetic").help("Show bridge methods generated by compiler"))
				.add(new Flag("-b", "--bridge").help("Show methods autogenerated by compiler (such as Enum.valueOf(String) or constructor by default)"))
				.add(new Flag("-allauto", "--all-autogenerated").help("Show synthetic, bridge and autogenerated fields, methods and classes"))
				
				.add(new StringOption("-i", "--indent").help("Set indent (by default four spaces)").defaultValue("    "))
				.add(new Flag("-t", "--tab").help("Use tab as indent").action(namespace -> namespace.set("--indent", "\t")))
				
				.add(new Flag("--up-literals").help("Print upper letter literals for long, float and double values"))
				.add(new Flag("--double-suffix").help("Print suffix for double values"))
				.add(new Flag("--no-trailing-zero").help("No print trailing zero for float and double values"))
				.add(new Flag("--esc-utf").help("Escape multibyte unicode characters"))
				
				.add(new Flag("-V", "--no-version").help("Don't print version for each class"))
				.add(new Flag("-M", "--no-multiline-string").help("Don't print multiline strings"))
				.add(new Flag("-A", "--no-short-arr-init").help("Don't use short array initialization (like int[] arr = {})"))
				.add(new Flag("--no-brackets-around-bitwise-operands"))
				.add(new Flag("--no-omit-curly-brackets").help("No omit curly brackets if scope contains zero or one expression"))
				.add(new Flag("--no-omit-this-class").help("No omit this keyword and this class in fields and methods"))
				
				
				.parse(args);
		
		this.constantsUsage = arguments.get("--use-constants");
		
		if(arguments.getBoolean("--all-autogenerated")) {
			this.showAutogenerated = true;
			this.showSynthetic = true;
			this.showBridge = true;
			
		} else {
			this.showAutogenerated = arguments.getBoolean("--autogenerated");
			this.showSynthetic = arguments.getBoolean("--synthetic");
			this.showBridge = arguments.getBoolean("--bridge");
		}
		
		this.indent = arguments.getString("--indent");
		
		this.files = Collections.unmodifiableList(arguments.getAll("files"));
		
		if(arguments.getBoolean("--up-literals")) {
			this.longSuffix = 'L';
			this.floatSuffix = 'F';
			this.doubleSuffix = 'D';
		} else {
			this.longSuffix = 'l';
			this.floatSuffix = 'f';
			this.doubleSuffix = 'd';
		}
		
		this.printDoubleSuffix = arguments.getBoolean("--double-suffix");
		this.printTrailingZero = !arguments.getBoolean("--no-trailing-zero");
		
		this.escapeUnicodeChars = arguments.getBoolean("--esc-utf");
		
		this.printClassVersion = !arguments.getBoolean("--no-version");
		
		this.multilineStringAllowed = !arguments.getBoolean("--no-multiline-string");
		this.shortArrayInitAllowed = !arguments.getBoolean("--no-short-arr-init");
		
		this.printBracketsAroundBitwiseOperands = !arguments.getBoolean("--no-brackets-around-bitwise-operands");
		this.canOmitCurlyBrackets = !arguments.getBoolean("--no-omit-curly-brackets");
		this.canOmitThisClass = !arguments.getBoolean("--no-omit-this-class");
	}

	
	
	public List<String> getFiles() {
		return files;
	}
	
	
	public String getIndent() {
		return indent;
	}
	
	
	public boolean showAutogenerated() {
		return showAutogenerated;
	}
	
	
	public boolean showSynthetic() {
		return showSynthetic;
	}
	
	
	public boolean showBridge() {
		return showBridge;
	}
	
	
	public char getLongSuffix() {
		return longSuffix;
	}
	
	public char getFloatSuffix() {
		return floatSuffix;
	}
	
	public char getDoubleSuffix() {
		return doubleSuffix;
	}
	
	
	public boolean printDoubleSuffix() {
		return printDoubleSuffix;
	}
	
	public boolean printTrailingZero() {
		return printTrailingZero;
	}
	
	
	public boolean escapeUnicodeChars() {
		return escapeUnicodeChars;
	}
	
	
	public boolean printClassVersion() {
		return printClassVersion;
	}
	
	
	public boolean multilineStringAllowed() {
		return multilineStringAllowed;
	}
	
	public boolean shortArrayInitAllowed() {
		return shortArrayInitAllowed;
	}
	
	
	public boolean printBracketsAroundBitwiseOperands() {
		return printBracketsAroundBitwiseOperands;
	}
	
	
	public boolean canOmitCurlyBrackets() {
		return canOmitCurlyBrackets;
	}
	
	public boolean canOmitThisClass() {
		return canOmitThisClass;
	}
}
