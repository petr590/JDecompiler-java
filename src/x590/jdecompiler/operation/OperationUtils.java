package x590.jdecompiler.operation;

import java.util.function.Consumer;

import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import x590.jdecompiler.context.DecompilationContext;
import x590.jdecompiler.field.FieldDescriptor;
import x590.jdecompiler.field.FieldInfo;
import x590.jdecompiler.main.JDecompiler;
import x590.jdecompiler.method.MethodDescriptor;
import x590.jdecompiler.operation.arrayload.IALoadOperation;
import x590.jdecompiler.operation.invoke.InvokevirtualOperation;
import x590.jdecompiler.type.ClassType;
import x590.jdecompiler.type.PrimitiveType;
import x590.util.annotation.Nullable;

public final class OperationUtils {
	
	private OperationUtils() {}
	
	
	public static void removeIfAutogeneratedCheckForNull(DecompilationContext context, Operation object) {
		if(!JDecompiler.getConfig().showAutogenerated()) {
			var prevOperation = context.currentScope().getLastOperation();
			
			if( prevOperation != null &&
				prevOperation instanceof PopOperation pop &&
				pop.getOperand() instanceof InvokevirtualOperation invokevirtual &&
				invokevirtual.getDescriptor().equals(ClassType.CLASS, ClassType.OBJECT, "getClass") &&
				invokevirtual.getObject() == object) {
				
				pop.remove();
			}
		}
	}
	
	public static @Nullable Int2ObjectMap<String> getEnumTable(DecompilationContext context, FieldDescriptor descriptor) {
		var fieldClassinfo = context.getClassinfo().findIClassInfo(descriptor.getDeclaringClass());
		
		if(fieldClassinfo != null) {
			var foundFieldInfo = fieldClassinfo.findFieldInfo(descriptor);
			
			return foundFieldInfo.isPresent() ? foundFieldInfo.get().getEnumTable() : null;
		}
		
		return null;
	}
	
	public static @Nullable Int2ObjectMap<String> getEnumTable(DecompilationContext context, MethodDescriptor descriptor) {
		var methodClassinfo = context.getClassinfo().findIClassInfo(descriptor.getDeclaringClass());
		
		if(methodClassinfo != null) {
			var foundMethodInfo = methodClassinfo.findMethodInfo(descriptor);
			
			return foundMethodInfo.isPresent() ? foundMethodInfo.get().getEnumTable() : null;
		}
		
		return null;
	}
	
	
	public static @Nullable Operation getEnumValueInSwitch(DecompilationContext context, Operation value, Consumer<Int2ObjectMap<String>> enumTableSetter) {
		
		if(value instanceof IALoadOperation iaload) {
			
			var enumTable = iaload.getArray().getEnumTable(context);
			
			if(enumTable != null &&
				iaload.getIndex() instanceof InvokevirtualOperation invokevirtual &&
				isDescriptorOrdinal(invokevirtual.getDescriptor())) {
				
				enumTableSetter.accept(enumTable);
				
				return invokevirtual.getObject();
				
			}
		}
		
		return null;
	}
	
	
	public static boolean isDescriptorOrdinal(MethodDescriptor descriptor) {
		return descriptor.equalsIgnoreClass(PrimitiveType.INT, "ordinal");
	}
	
	
	public static @Nullable Int2ObjectMap<String> initEnumTable(DecompilationContext context, FieldDescriptor descriptor,
			@Nullable Int2ObjectMap<String> enumTable, Consumer<@Nullable Int2ObjectMap<String>> enumTableSetter) {
		
		if(enumTable != FieldInfo.UNDEFINED_ENUM_TABLE)
			return enumTable;
		
		enumTable = OperationUtils.getEnumTable(context, descriptor);
		enumTableSetter.accept(enumTable);
		return enumTable;
	}
	
	
	public static @Nullable Int2ObjectMap<String> initEnumTable(DecompilationContext context, MethodDescriptor descriptor,
			@Nullable Int2ObjectMap<String> enumTable, Consumer<@Nullable Int2ObjectMap<String>> enumTableSetter) {
		
		if(enumTable != FieldInfo.UNDEFINED_ENUM_TABLE)
			return enumTable;
		
		enumTable = OperationUtils.getEnumTable(context, descriptor);
		enumTableSetter.accept(enumTable);
		return enumTable;
	}
}
