package x590.jdecompiler.main;

import java.util.Collections;
import java.util.List;

import x590.argparser.ArgsNamespace;
import x590.argparser.Flag;
import x590.argparser.StandartArgParser;
import x590.argparser.option.EnumOption;
import x590.argparser.option.StringOption;
import x590.util.annotation.Immutable;

public class JDecompiler {
	
	private static JDecompiler INSTANCE;
	
	public static JDecompiler getInstance() {
		if(INSTANCE != null)
			return INSTANCE;
		
		throw new IllegalStateException("JDecompiler yet not initialized");
	}
	
	
	private final @Immutable List<String> files;
	
	
	public enum UsagePolicy {
		ALWAYS, AUTO, NEVER;
		
		
		public boolean isAlways() {
			return this == ALWAYS;
		}
		
		public boolean isAuto() {
			return this == AUTO;
		}
		
		public boolean isNever() {
			return this == NEVER;
		}
		
		
		public boolean isNotAlways() {
			return this != ALWAYS;
		}
		
		public boolean isNotAuto() {
			return this != AUTO;
		}
		
		public boolean isNotNever() {
			return this != NEVER;
		}
	}
	
	private final UsagePolicy constantsUsagePolicy;
	private final boolean showAutogenerated, showSynthetic, showBridge;
	
	private final String indent;
	
	private final UsagePolicy hexNumbersUsagePolicy;
	private final char longSuffix, floatSuffix, doubleSuffix;
	private final boolean printDoubleSuffix, printTrailingZero;
	
	private final boolean escapeUnicodeChars;
	private final boolean printClassVersion;
	private final boolean printImplicitModifiers;
	
	private final boolean multilineStringAllowed;
	private final boolean shortArrayInitAllowed;
	
	private final boolean printBracketsAroundBitwiseOperands;
	private final boolean canOmitCurlyBrackets, canOmitThisAndClass, canOmitSingleImport;
	
	public static void init(String[] args) {
		
		if(INSTANCE != null)
			throw new IllegalStateException("JDecompiler already initialized");
		
		INSTANCE = new JDecompiler(args);
	}
	
	
	private JDecompiler(String[] args) {
		
		ArgsNamespace arguments = new StandartArgParser("JDecompiler", Version.VERSION).localize()
				
				.add(new StringOption("files").help("Files to be processed").oneOrMoreTimes())
				
				.add(new EnumOption<>(UsagePolicy.class, "-c", "--constants")
						.implicitValue(UsagePolicy.ALWAYS).defaultValue(UsagePolicy.ALWAYS)
						.help("Use constants: always - always use, auto - use only general constants (Integer.MAX_VALUE, Math.PI, etc.), never - never use"))
				
				.add(new Flag("-auto", "--autogenerated").help("Show synthetic fields, methods and classes generated by compiler"))
				.add(new Flag("-s", "--synthetic").help("Show bridge methods generated by compiler"))
				.add(new Flag("-b", "--bridge").help("Show methods autogenerated by compiler (such as Enum.valueOf(String) or constructor by default)"))
				.add(new Flag("-allauto", "--all-autogenerated").help("Show synthetic, bridge and autogenerated fields, methods and classes"))
				
				.add(new StringOption("-i", "--indent").help("Set indent (by default four spaces)").defaultValue("    "))
				.add(new Flag("-t", "--tab").help("Use tab as indent").action(namespace -> namespace.add("--indent", "\t")))
				
				.add(new EnumOption<>(UsagePolicy.class, "-x", "--hex")
						.implicitValue(UsagePolicy.ALWAYS).defaultValue(UsagePolicy.AUTO)
						.help("Use hex numbers: always - always use, min - only for values like 0x7F, 0x80 and 0xFF, never - never use"))
				
				
				.add(new Flag("--low-literals").help("Print lower letter literals for long, float and double values"))
				.add(new Flag("--double-suffix").help("Print suffix for double values"))
				.add(new Flag("--no-trailing-zero").help("No print trailing zero for float and double values"))
				.add(new Flag("--esc-utf").help("Escape multibyte unicode characters"))
				
				.add(new Flag("-V", "--no-version").help("Don't print version for each class"))
				.add(new Flag("--no-print-implicit-modifiers").help("Don't print implied modifiers (`public` for interfaces or `private` for enum constructor)"))
				.add(new Flag("-M", "--no-multiline-string").help("Don't print multiline strings"))
				.add(new Flag("-A", "--no-short-arr-init").help("Don't use short array initialization (like int[] arr = {})"))
				.add(new Flag("--no-brackets-around-bitwise-operands"))
				.add(new Flag("--no-omit-curly-brackets").help("No omit curly brackets if scope contains zero or one expression"))
				.add(new Flag("--no-omit-this-and-class").help("No omit `this` keyword and this class in fields and methods access"))
				.add(new Flag("--omit-single-import").help("Omit import if class uses only one time"))
				
				
				.parse(args);
		
		this.constantsUsagePolicy = arguments.get("--constants");
		
		if(arguments.getBoolean("--all-autogenerated")) {
			this.showAutogenerated = true;
			this.showSynthetic = true;
			this.showBridge = true;
			
		} else {
			this.showAutogenerated = arguments.getBoolean("--autogenerated");
			this.showSynthetic = arguments.getBoolean("--synthetic");
			this.showBridge = arguments.getBoolean("--bridge");
		}
		
		this.indent = arguments.getString("--indent");
		
		this.files = Collections.unmodifiableList(arguments.getAll("files"));
		
		this.hexNumbersUsagePolicy = arguments.get("--hex");
		
		if(arguments.getBoolean("--low-literals")) {
			this.longSuffix = 'l';
			this.floatSuffix = 'f';
			this.doubleSuffix = 'd';
		} else {
			this.longSuffix = 'L';
			this.floatSuffix = 'F';
			this.doubleSuffix = 'D';
		}
		
		this.printDoubleSuffix = arguments.getBoolean("--double-suffix");
		this.printTrailingZero = !arguments.getBoolean("--no-trailing-zero");
		
		this.escapeUnicodeChars = arguments.getBoolean("--esc-utf");
		
		this.printClassVersion = !arguments.getBoolean("--no-version");
		this.printImplicitModifiers = !arguments.getBoolean("--no-print-implicit-modifiers");
		
		this.multilineStringAllowed = !arguments.getBoolean("--no-multiline-string");
		this.shortArrayInitAllowed = !arguments.getBoolean("--no-short-arr-init");
		
		this.printBracketsAroundBitwiseOperands = !arguments.getBoolean("--no-brackets-around-bitwise-operands");
		this.canOmitCurlyBrackets = !arguments.getBoolean("--no-omit-curly-brackets");
		this.canOmitThisAndClass = !arguments.getBoolean("--no-omit-this-and-class");
		this.canOmitSingleImport = arguments.getBoolean("--omit-single-import");
	}

	
	
	public @Immutable List<String> getFiles() {
		return files;
	}
	
	
	public UsagePolicy constantsUsagePolicy() {
		return constantsUsagePolicy;
	}
	
	
	public String getIndent() {
		return indent;
	}
	
	
	public boolean showAutogenerated() {
		return showAutogenerated;
	}
	
	
	public boolean showSynthetic() {
		return showSynthetic;
	}
	
	
	public boolean showBridge() {
		return showBridge;
	}
	
	
	public UsagePolicy hexNumbersUsagePolicy() {
		return hexNumbersUsagePolicy;
	}
	
	public char getLongSuffix() {
		return longSuffix;
	}
	
	public char getFloatSuffix() {
		return floatSuffix;
	}
	
	public char getDoubleSuffix() {
		return doubleSuffix;
	}
	
	
	public boolean printDoubleSuffix() {
		return printDoubleSuffix;
	}
	
	public boolean printTrailingZero() {
		return printTrailingZero;
	}
	
	
	public boolean escapeUnicodeChars() {
		return escapeUnicodeChars;
	}
	
	
	public boolean printClassVersion() {
		return printClassVersion;
	}
	
	public boolean printImplicitModifiers() {
		return printImplicitModifiers;
	}
	
	
	public boolean multilineStringAllowed() {
		return multilineStringAllowed;
	}
	
	public boolean shortArrayInitAllowed() {
		return shortArrayInitAllowed;
	}
	
	
	public boolean printBracketsAroundBitwiseOperands() {
		return printBracketsAroundBitwiseOperands;
	}
	
	
	public boolean canOmitCurlyBrackets() {
		return canOmitCurlyBrackets;
	}
	
	public boolean canOmitThisAndClass() {
		return canOmitThisAndClass;
	}
	
	
	public boolean canOmitSingleImport() {
		return canOmitSingleImport;
	}
}
