package x590.jdecompiler;

import static x590.jdecompiler.modifiers.Modifiers.*;

import java.util.ArrayList;
import java.util.List;

import x590.jdecompiler.attribute.AttributeNames;
import x590.jdecompiler.attribute.Attributes;
import x590.jdecompiler.attribute.CodeAttribute;
import x590.jdecompiler.attribute.EmptyCodeAttribute;
import x590.jdecompiler.attribute.ExceptionsAttribute;
import x590.jdecompiler.attribute.Attributes.Location;
import x590.jdecompiler.attribute.signature.MethodSignatureAttribute;
import x590.jdecompiler.constpool.ConstantPool;
import x590.jdecompiler.context.DecompilationContext;
import x590.jdecompiler.context.DisassemblerContext;
import x590.jdecompiler.context.StringifyContext;
import x590.jdecompiler.exception.IllegalModifiersException;
import x590.jdecompiler.io.ExtendedDataInputStream;
import x590.jdecompiler.io.StringifyOutputStream;
import x590.jdecompiler.main.JDecompiler;
import x590.jdecompiler.modifiers.MethodModifiers;
import x590.jdecompiler.scope.MethodScope;
import x590.jdecompiler.type.ArrayType;
import x590.jdecompiler.type.ClassType;
import x590.jdecompiler.type.PrimitiveType;
import x590.jdecompiler.util.IWhitespaceStringBuilder;
import x590.jdecompiler.util.WhitespaceStringBuilder;
import x590.util.Logger;
import x590.util.annotation.Nullable;
import x590.util.lazyloading.LazyLoadingBooleanValue;

public class JavaMethod extends JavaClassElement {
	
	private final MethodModifiers modifiers;
	private final MethodDescriptor descriptor;
	
	private final Attributes attributes;
	private final CodeAttribute codeAttribute;
	private final @Nullable MethodSignatureAttribute signature;
	
	private DisassemblerContext disassemblerContext;
	private DecompilationContext decompilationContext;
	private StringifyContext stringifyContext;
	
	private MethodScope methodScope;
	
	private boolean isAutogenerated(ClassInfo classinfo) {
		
		if(signature != null && signature.hasGenericTypes() || attributes.has(AttributeNames.EXCEPTIONS) ||
			attributes.has(AttributeNames.RUNTIME_VISIBLE_ANNOTATIONS) || attributes.has(AttributeNames.RUNTIME_INVISIBLE_ANNOTATIONS)) {
			return false;
		}
		
		var hasNoOtherConstructors =
				new LazyLoadingBooleanValue(() -> !classinfo.hasMethod(method -> method != this && method.descriptor.isConstructor()));
		
		var descriptor = this.descriptor;
		var thisClassType = classinfo.getThisType();
		
		if(descriptor.isConstructorOf(thisClassType) && descriptor.argumentsEquals() && modifiers.and(ACC_ACCESS_FLAGS) == classinfo.getModifiers().and(ACC_ACCESS_FLAGS) &&
				methodScope.isEmpty() && hasNoOtherConstructors.getAsBoolean()) { // constructor by default
			return true;
		}
		
		if(descriptor.isStaticInitializer() && methodScope.isEmpty()) { // empty static {}
			return true;
		}
		
		if(thisClassType.isAnonymous() && descriptor.isConstructorOf(thisClassType)) { // anonymous class constructor
			return true;
		}
		
		if(classinfo.getModifiers().isEnum()) {
			
			// enum constructor by default
			if(descriptor.isConstructorOf(thisClassType) && descriptor.argumentsEquals(ClassType.STRING, PrimitiveType.INT)
				&& modifiers.isPrivate() && methodScope.isEmpty() && hasNoOtherConstructors.getAsBoolean()) {
				
				return true;
			}
				
			if( descriptor.equals("valueOf", thisClassType, ClassType.STRING) || // Enum valueOf(String name)
				descriptor.equals("values", ArrayType.forType(thisClassType))) { // Enum[] values()
				return true;
			}
		}
		
		return false;
	}
	
	
	JavaMethod(ExtendedDataInputStream in, ClassInfo classinfo, ConstantPool pool) {
		this.modifiers = MethodModifiers.read(in);
		this.descriptor = new MethodDescriptor(classinfo.getThisType(), in, pool);
		
		this.attributes = Attributes.read(in, pool, Location.METHOD);
		this.codeAttribute = attributes.getOrDefault(AttributeNames.CODE, EmptyCodeAttribute.INSTANCE);
		this.signature = attributes.get(AttributeNames.SIGNATURE);
		
		if(signature  != null)
			signature.checkTypes(descriptor, descriptor.getVisibleStartIndex(classinfo), attributes.get("Exceptions"));
		
		Logger.logf("Disassembling of method %s", descriptor);
		this.disassemblerContext = DisassemblerContext.disassemble(pool, codeAttribute.code);
		
		this.methodScope = MethodScope.of(classinfo, descriptor, modifiers, codeAttribute,
				disassemblerContext.getInstructions().size(), codeAttribute.isEmpty() ? descriptor.countLocals(modifiers) : codeAttribute.maxLocals);
		
		this.stringifyContext = new StringifyContext(disassemblerContext, classinfo, descriptor, methodScope, modifiers);
	}
	
	
	static List<JavaMethod> readMethods(ExtendedDataInputStream in, ClassInfo classinfo, ConstantPool pool) {
		int length = in.readUnsignedShort();
		List<JavaMethod> methods = new ArrayList<>(length);
		
		for(int i = 0; i < length; i++) {
			methods.add(new JavaMethod(in, classinfo, pool));
		}
		
		return methods;
	}
	
	
	@Override
	public MethodModifiers getModifiers() {
		return modifiers;
	}
	
	public MethodDescriptor getDescriptor() {
		return descriptor;
	}
	
	public Attributes getAttributes() {
		return attributes;
	}
	
	
	public StringifyContext getStringifyContext() {
		return stringifyContext;
	}
	
	
	void decompile(ClassInfo classinfo, ConstantPool pool) {
		Logger.logf("Decompiling of method %s", descriptor);
		decompilationContext = DecompilationContext.decompile(disassemblerContext, classinfo, descriptor, modifiers, methodScope, disassemblerContext.getInstructions(), codeAttribute.maxLocals);
		methodScope.reduceTypes();
		methodScope.defineVariables();
	}
	
	
	@Override
	public void addImports(ClassInfo classinfo) {
		attributes.addImports(classinfo);
		descriptor.addImports(classinfo);
		decompilationContext.addImports(classinfo);
	}
	
	
	@Override
	public boolean canStringify(ClassInfo classinfo) {
		return (!modifiers.isSyntheticOrBridge() ||
				modifiers.isSynthetic() && JDecompiler.getInstance().showSynthetic() ||
				modifiers.isBridge() && JDecompiler.getInstance().showBridge()) &&
				(JDecompiler.getInstance().showAutogenerated() || !isAutogenerated(classinfo));
	}
	
	
	@Override
	public void writeTo(StringifyOutputStream out, ClassInfo classinfo) {
		
		methodScope.assignVariablesNames();
		
		writeAnnotations(out, classinfo, attributes);
		
		out.printIndent().print(modifiersToString(classinfo), classinfo);
		descriptor.write(out, stringifyContext, attributes, signature);
		
		attributes.getOrDefault(AttributeNames.EXCEPTIONS, ExceptionsAttribute.empty()).write(out, classinfo, signature);
		
		out.writeIfNotNull(attributes.getAsWritable(AttributeNames.ANNOTATION_DEFAULT), classinfo);
		
		if(codeAttribute.isEmpty()) {
			out.write(';');
		} else {
			out.write(methodScope, stringifyContext);
		}
		
		out.writeln();
	}
	
	private IWhitespaceStringBuilder modifiersToString(ClassInfo classinfo) {
		
		if(descriptor.isStaticInitializer()) {
			if(modifiers.getValue() == ACC_STATIC) {
				return WhitespaceStringBuilder.empty();
			} else {
				throw new IllegalModifiersException("Static initializer must have only static modifier");
			}
		}
		
		IWhitespaceStringBuilder str = new WhitespaceStringBuilder().printTrailingSpace();
		
		var modifiers = this.modifiers;
		var classModifiers = classinfo.getModifiers();
		
		switch(modifiers.and(ACC_ACCESS_FLAGS)) {
			case ACC_VISIBLE -> {}
			
			case ACC_PUBLIC -> { // Все нестатические методы интерфейса по умолчанию имеют модификатор public, поэтому в этом случае нам не нужно выводить public
				if(JDecompiler.getInstance().printImplicitModifiers() || classModifiers.isNotInterface())
					str.append("public");
			}
			
			case ACC_PRIVATE -> { // Конструкторы Enum по умолчанию имеют модификатор private, поэтому нам не нужно выводить private
				if(JDecompiler.getInstance().printImplicitModifiers() || !(classModifiers.isEnum() && descriptor.isConstructor() && descriptor.getDeclaringClass().equals(classinfo.getThisType())))
					str.append("private");
			}
			
			case ACC_PROTECTED -> {
				str.append("protected");
			}
			
			default -> {
				throw new IllegalModifiersException(modifiers);
			}
		}
		
		if(modifiers.isStatic())
			str.append("static");
		
		if(modifiers.isAbstract()) {
			
			if(modifiers.isAny(ACC_STATIC | ACC_FINAL | ACC_SYNCHRONIZED | ACC_NATIVE | ACC_STRICT))
				throw new IllegalModifiersException(modifiers);
			
			if(classModifiers.isNotInterface())
				str.append("abstract");
			
		} else {
			if(classModifiers.isInterface() && modifiers.isNotStatic() && modifiers.isNotPrivate())
				str.append("default");
		}
		
		if(modifiers.isFinal()) str.append("final");
		if(modifiers.isSynchronized()) str.append("synchronized");
		
		if(modifiers.isNative() && modifiers.isStrictfp()) throw new IllegalModifiersException(modifiers);
		if(modifiers.isNative()) str.append("native");
		else if(modifiers.isStrictfp()) str.append("strictfp");
		
		return str;
	}
	
	@Override
	public String toString() {
		return modifiers + " " + descriptor;
	}
}
